[{"path":[]},{"path":"https://conflicted.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://conflicted.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://conflicted.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://conflicted.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://conflicted.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://conflicted.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://conflicted.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://conflicted.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://conflicted.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://conflicted.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://conflicted.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://conflicted.r-lib.org/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 conflicted authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://conflicted.r-lib.org/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hadley Wickham. Author, maintainer. . Copyright holder, funder.","code":""},{"path":"https://conflicted.r-lib.org/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wickham H (2024). conflicted: Alternative Conflict Resolution Strategy. R package version 1.2.0.9000, https://github.com/r-lib/conflicted, https://conflicted.r-lib.org/.","code":"@Manual{,   title = {conflicted: An Alternative Conflict Resolution Strategy},   author = {Hadley Wickham},   year = {2024},   note = {R package version 1.2.0.9000, https://github.com/r-lib/conflicted},   url = {https://conflicted.r-lib.org/}, }"},{"path":"https://conflicted.r-lib.org/dev/index.html","id":"conflicted","dir":"","previous_headings":"","what":"An Alternative Conflict Resolution Strategy","title":"An Alternative Conflict Resolution Strategy","text":"goal conflicted provide alternative conflict resolution strategy. R’s default conflict resolution system gives precedence recently loaded package. can make hard detect conflicts, particularly introduced update existing package. conflicted takes different approach, making every conflict error forcing choose function use. Thanks @krlmlr neat idea! code previously part experimental strict package, decided improved conflict resolution useful worth package.","code":""},{"path":"https://conflicted.r-lib.org/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An Alternative Conflict Resolution Strategy","text":"","code":"# install.packages(\"pak\") pak::pak(\"r-lib/conflicted\")"},{"path":"https://conflicted.r-lib.org/dev/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"An Alternative Conflict Resolution Strategy","text":"use conflicted, need load : suggested, can either namespace individual calls: declare session-wide preference: recommend declaring preferences directly underneath corresponding library call: can ask conflicted report conflicts current session: Functions surrounded [] chosen using one built-rules. filter() selected preference declared ; set operations selected follow superset principle extend API base equivalents.","code":"library(conflicted) library(dplyr)  filter(mtcars, cyl == 8) #> Error: #> ! [conflicted] filter found in 2 packages. #> Either pick the one you want with `::`: #> • dplyr::filter #> • stats::filter #> Or declare a preference with `conflicts_prefer()`: #> • `conflicts_prefer(dplyr::filter)` #> • `conflicts_prefer(stats::filter)` dplyr::filter(mtcars, am & cyl == 8) #>                 mpg cyl disp  hp drat   wt qsec vs am gear carb #> Ford Pantera L 15.8   8  351 264 4.22 3.17 14.5  0  1    5    4 #> Maserati Bora  15.0   8  301 335 3.54 3.57 14.6  0  1    5    8 conflicts_prefer(dplyr::filter()) #> [conflicted] Will prefer dplyr::filter over any other package. filter(mtcars, am & cyl == 8) #>                 mpg cyl disp  hp drat   wt qsec vs am gear carb #> Ford Pantera L 15.8   8  351 264 4.22 3.17 14.5  0  1    5    4 #> Maserati Bora  15.0   8  301 335 3.54 3.57 14.6  0  1    5    8 library(dplyr) conflicts_prefer(dplyr::filter) conflict_scout() #> 1 conflict #> • `lag()`: dplyr and stats"},{"path":"https://conflicted.r-lib.org/dev/index.html","id":"how-it-works","dir":"","previous_headings":"Usage","what":"How it works","title":"An Alternative Conflict Resolution Strategy","text":"Loading conflicted creates new “conflicted” environment attached just global environment. environment contains active binding object exported multiple packages; active binding throw error message describing disambiguate name. conflicted environment also contains bindings library() require() suppress conflict reporting update conflicted environment new conflicts.","code":""},{"path":"https://conflicted.r-lib.org/dev/index.html","id":"alternative-approaches","dir":"","previous_headings":"","what":"Alternative approaches","title":"An Alternative Conflict Resolution Strategy","text":"worth comparing conflicted box import. packages provide strict alternatives library(), giving much finer control functions added search path. require upfront work conflicted, return greater precision control. Since conflicted created base R also improved tools managing search path conflicts. See blog post Luke Tierney details. main difference base R requires front conflict resolution functions loading package; conflicted reports problems use conflicted functions.","code":"# box expects you to either namespace all package functions or to load them explicitly box::use(dplyr) dplyr$filter(mtcars, cyl == 8) # or: box::use(dplyr[select, arrange, dplyr_filter = filter]) dplyr_filter(mtcars, cyl == 8)  # import expects you to explicitly load functions import::from(dplyr, select, arrange, dplyr_filter = filter) dplyr_filter(mtcars, cyl == 8)"},{"path":"https://conflicted.r-lib.org/dev/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"An Alternative Conflict Resolution Strategy","text":"Please note conflicted project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://conflicted.r-lib.org/dev/reference/conflict_prefer.html","id":null,"dir":"Reference","previous_headings":"","what":"Persistently prefer one function over another — conflict_prefer","title":"Persistently prefer one function over another — conflict_prefer","text":"conflict_prefer() allows declare \"winners\" conflicts. can either declare specific pairing (.e. dplyr::filter() beats base::filter()), overall winner (.e. dplyr::filter() beats comers). conflicted 1.2.0, case use conflicts_prefer() instead faster easier use. Use conflicted_prefer_all() prefer functions package, conflicted_prefer_matching() prefer functions match regular expression.","code":""},{"path":"https://conflicted.r-lib.org/dev/reference/conflict_prefer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Persistently prefer one function over another — conflict_prefer","text":"","code":"conflict_prefer(name, winner, losers = NULL, quiet = FALSE)  conflict_prefer_matching(pattern, winner, losers = NULL, quiet = FALSE)  conflict_prefer_all(winner, losers = NULL, quiet = FALSE)"},{"path":"https://conflicted.r-lib.org/dev/reference/conflict_prefer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Persistently prefer one function over another — conflict_prefer","text":"name Name function. winner Name package win conflict. losers Optional vector packages lose conflict. omitted, winner beat comers. quiet TRUE, output suppressed pattern Regular expression used select objects winner package.","code":""},{"path":"https://conflicted.r-lib.org/dev/reference/conflict_prefer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Persistently prefer one function over another — conflict_prefer","text":"","code":"# Prefer over all other packages conflict_prefer(\"filter\", \"dplyr\") #> [conflicted] Will prefer dplyr::filter over any other package.  # Prefer over specified package or packages conflict_prefer(\"filter\", \"dplyr\", \"base\") #> [conflicted] Removing existing preference. #> [conflicted] Will prefer dplyr::filter over base::filter. conflict_prefer(\"filter\", \"dplyr\", c(\"base\", \"filtration\")) #> [conflicted] Removing existing preference. #> [conflicted] Will prefer dplyr::filter over base::filter and #> filtration::filter.  # Prefer many functions that match a pattern if (FALSE) { # Prefer col_* from vroom conflict_prefer_matching(\"^col_\", \"vroom\") } # Or all functions from a package: if (FALSE) { # Prefer all tidylog functions over dtplyr functions conflict_prefer_all(\"tidylog\", \"dtplyr\") }"},{"path":"https://conflicted.r-lib.org/dev/reference/conflict_scout.html","id":null,"dir":"Reference","previous_headings":"","what":"Find conflicts amongst a set of packages — conflict_scout","title":"Find conflicts amongst a set of packages — conflict_scout","text":"conflict_scout() workhorse behind conflicted package. can call directly want see conflicts hitting practice.","code":""},{"path":"https://conflicted.r-lib.org/dev/reference/conflict_scout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find conflicts amongst a set of packages — conflict_scout","text":"","code":"conflict_scout(pkgs = NULL)"},{"path":"https://conflicted.r-lib.org/dev/reference/conflict_scout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find conflicts amongst a set of packages — conflict_scout","text":"pkgs Set packages report conflicts. NULL, default, report conflicts loaded packages","code":""},{"path":"https://conflicted.r-lib.org/dev/reference/conflict_scout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find conflicts amongst a set of packages — conflict_scout","text":"named list character vectors. names functions values packages appear. Disambiguated functions removed list. user friendly print method displays result bulleted list.","code":""},{"path":"https://conflicted.r-lib.org/dev/reference/conflict_scout.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find conflicts amongst a set of packages — conflict_scout","text":"reexported function, function report package function defined. package attached, report first package search path pkgs argument.","code":""},{"path":"https://conflicted.r-lib.org/dev/reference/conflict_scout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find conflicts amongst a set of packages — conflict_scout","text":"","code":"conflict_scout() #> 0 conflicts"},{"path":"https://conflicted.r-lib.org/dev/reference/conflicted-package.html","id":null,"dir":"Reference","previous_headings":"","what":"conflicted: An Alternative Conflict Resolution Strategy — conflicted-package","title":"conflicted: An Alternative Conflict Resolution Strategy — conflicted-package","text":"R's default conflict management system gives recently loaded package precedence. can make hard detect conflicts, particularly arise package update creates ambiguity previously exist. 'conflicted' takes different approach, making every conflict error forcing choose function use.","code":""},{"path":"https://conflicted.r-lib.org/dev/reference/conflicted-package.html","id":"resolving-conflicts","dir":"Reference","previous_headings":"","what":"Resolving conflicts","title":"conflicted: An Alternative Conflict Resolution Strategy — conflicted-package","text":"permanently resolve conflict within session, use assignment:","code":"library(conflicted) library(dplyr)  filter <- dplyr::filter"},{"path":[]},{"path":"https://conflicted.r-lib.org/dev/reference/conflicted-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"conflicted: An Alternative Conflict Resolution Strategy — conflicted-package","text":"Maintainer: Hadley Wickham hadley@posit.co contributors: Posit Software, PBC [copyright holder, funder]","code":""},{"path":"https://conflicted.r-lib.org/dev/reference/conflicts_prefer.html","id":null,"dir":"Reference","previous_headings":"","what":"Declare many preferences at once — conflicts_prefer","title":"Declare many preferences at once — conflicts_prefer","text":"conflicts_prefer() allows declare \"winners\" conflicts, declaring one many winners . See conflict_prefer() precise control.","code":""},{"path":"https://conflicted.r-lib.org/dev/reference/conflicts_prefer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Declare many preferences at once — conflicts_prefer","text":"","code":"conflicts_prefer(..., .quiet = FALSE)"},{"path":"https://conflicted.r-lib.org/dev/reference/conflicts_prefer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Declare many preferences at once — conflicts_prefer","text":"... Functions prefer form pkg::fun pkg::fun(). .quiet TRUE, output suppressed","code":""},{"path":"https://conflicted.r-lib.org/dev/reference/conflicts_prefer.html","id":"best-practices","dir":"Reference","previous_headings":"","what":"Best practices","title":"Declare many preferences at once — conflicts_prefer","text":"recommend placing single call conflicts_prefer() top script, immediately loading needed packages calls library().","code":""},{"path":"https://conflicted.r-lib.org/dev/reference/conflicts_prefer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Declare many preferences at once — conflicts_prefer","text":"","code":"conflicts_prefer(   dplyr::filter(),   dplyr::lag(), ) #> [conflicted] Removing existing preference. #> [conflicted] Will prefer dplyr::filter over any other package. #> [conflicted] Will prefer dplyr::lag over any other package.  # or conflicts_prefer(   dplyr::filter,   dplyr::lag, ) #> [conflicted] Removing existing preference. #> [conflicted] Will prefer dplyr::filter over any other package. #> [conflicted] Removing existing preference. #> [conflicted] Will prefer dplyr::lag over any other package."},{"path":"https://conflicted.r-lib.org/dev/news/index.html","id":"conflicted-development-version","dir":"Changelog","previous_headings":"","what":"conflicted (development version)","title":"conflicted (development version)","text":"conflict_scout() refers package function defined, reexported functions (#93). conflict_scout() longer returns functions whose conflicts resolved manually automatically (#95).","code":""},{"path":"https://conflicted.r-lib.org/dev/news/index.html","id":"conflicted-120","dir":"Changelog","previous_headings":"","what":"conflicted 1.2.0","title":"conflicted 1.2.0","text":"CRAN release: 2023-02-01 New conflicts_prefer() easily declare multiple preferences : conflicts_prefer(dplyr::filter, lubridate::week, ...) (#82). Disambiguation message now provides clickable preferences (#74). Conflicts now take account include.exclude arguments might specified library() (#84). conflict_prefer_all() conflict_prefer_matching() now much faster. losers supplied, register minimal necessary number conflicts.","code":""},{"path":"https://conflicted.r-lib.org/dev/news/index.html","id":"conflicted-110","dir":"Changelog","previous_headings":"","what":"conflicted 1.1.0","title":"conflicted 1.1.0","text":"CRAN release: 2021-11-26 New conflicted_prefer_all() conflicted_prefer_matching() prefer functions en masse (#51). Improvements conflict detection resolution: Reports conflicts involving lazy loaded datasets (#54). Don’t report conflicts involving standardGeneric (#47). Better handling conflicts cleared superset principle: conflict functions (including base functions) reported, isn’t conflict, packages reported (instead 1) (#47). Don’t report conflict function non-function (#30). Conflicts involving primitive function longer error (@nerskin, #46, #48).","code":""},{"path":"https://conflicted.r-lib.org/dev/news/index.html","id":"conflicted-104","dir":"Changelog","previous_headings":"","what":"conflicted 1.0.4","title":"conflicted 1.0.4","text":"CRAN release: 2019-06-21 Fixes dev rlang","code":""},{"path":"https://conflicted.r-lib.org/dev/news/index.html","id":"conflicted-103","dir":"Changelog","previous_headings":"","what":"conflicted 1.0.3","title":"conflicted 1.0.3","text":"CRAN release: 2019-05-01 Fix > vs >= mistake","code":""},{"path":"https://conflicted.r-lib.org/dev/news/index.html","id":"conflicted-102","dir":"Changelog","previous_headings":"","what":"conflicted 1.0.2","title":"conflicted 1.0.2","text":"CRAN release: 2019-03-29 Align changes R 3.6","code":""},{"path":"https://conflicted.r-lib.org/dev/news/index.html","id":"conflicted-101","dir":"Changelog","previous_headings":"","what":"conflicted 1.0.1","title":"conflicted 1.0.1","text":"CRAN release: 2018-10-02 Internal has_moved() function longer fails encounters call .Deprecated() arguments (#29). .conflicts environment correctly removed replaced time new package loaded (#28).","code":""},{"path":"https://conflicted.r-lib.org/dev/news/index.html","id":"conflicted-100","dir":"Changelog","previous_headings":"","what":"conflicted 1.0.0","title":"conflicted 1.0.0","text":"CRAN release: 2018-09-15","code":""},{"path":"https://conflicted.r-lib.org/dev/news/index.html","id":"new-functions-1-0-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"conflicted 1.0.0","text":"conflict_scout() reports conflicts found set packages. conflict_prefer() allows declare persistent preference (within session) one function another (#4).","code":""},{"path":"https://conflicted.r-lib.org/dev/news/index.html","id":"improve-conflict-resolution-1-0-0","dir":"Changelog","previous_headings":"","what":"Improve conflict resolution","title":"conflicted 1.0.0","text":"conflicts now generally expects packages override functions base packages obey “superset principle”, .e. foo::bar(...) must return value base::bar(...) whenever input error. words, override base function can extend API, change reduce . two exceptions. arguments two functions compatible (.e. function package doesn’t include arguments base package), conflicts can tell doesn’t follow superset principle. Additionally, dplyr::lag() fails follow superset principle, marked special case (#2). Functions moved packages (.e. functions call .Deprecated(\"pkg::foo\")) first element function body) never generate conflicts. conflicted now listens detach() events removes conflicts removed detaching package (#5)","code":""},{"path":"https://conflicted.r-lib.org/dev/news/index.html","id":"minor-improvements-and-bug-fixes-1-0-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"conflicted 1.0.0","text":"Error messages infix functions non-syntactic function names improved (#14)","code":""}]
